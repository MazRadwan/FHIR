{
  "info": {
    "name": "FHIR Sandbox R4 Collection",
    "description": "Complete CRUD operations for Patient and Observation resources",
    "schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
    "_postman_id": "fhir-sandbox-r4-collection",
    "version": "1.0.0"
  },
  "variable": [
    {
      "key": "baseUrl",
      "value": "http://localhost:8080/fhir",
      "type": "string"
    },
    {
      "key": "patientId",
      "value": "",
      "type": "string"
    },
    {
      "key": "observationId", 
      "value": "",
      "type": "string"
    }
  ],
  "item": [
    {
      "name": "1. Create Patient",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response has Location header', function () {",
              "    pm.response.to.have.header('Location');",
              "});",
              "",
              "pm.test('Response contains Patient resource', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.resourceType).to.eql('Patient');",
              "    pm.expect(jsonData.id).to.exist;",
              "    pm.globals.set('patientId', jsonData.id);",
              "});",
              "",
              "pm.test('Patient has correct name', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.name[0].family).to.eql('Doe');",
              "    pm.expect(jsonData.name[0].given[0]).to.eql('John');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/fhir+json"
          },
          {
            "key": "Accept",
            "value": "application/fhir+json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"resourceType\": \"Patient\",\n  \"name\": [\n    {\n      \"family\": \"Doe\",\n      \"given\": [\"John\", \"Michael\"]\n    }\n  ],\n  \"gender\": \"male\",\n  \"birthDate\": \"1985-03-15\",\n  \"address\": [\n    {\n      \"line\": [\"123 Main Street\"],\n      \"city\": \"Anytown\", \n      \"state\": \"NY\",\n      \"postalCode\": \"12345\",\n      \"country\": \"USA\"\n    }\n  ],\n  \"telecom\": [\n    {\n      \"system\": \"phone\",\n      \"value\": \"+1-555-123-4567\",\n      \"use\": \"home\"\n    },\n    {\n      \"system\": \"email\",\n      \"value\": \"john.doe@example.com\",\n      \"use\": \"home\"\n    }\n  ],\n  \"identifier\": [\n    {\n      \"use\": \"usual\",\n      \"type\": {\n        \"coding\": [\n          {\n            \"system\": \"http://terminology.hl7.org/CodeSystem/v2-0203\",\n            \"code\": \"MR\",\n            \"display\": \"Medical Record Number\"\n          }\n        ]\n      },\n      \"system\": \"http://hospital.example.org\",\n      \"value\": \"MRN-12345\"\n    }\n  ],\n  \"active\": true\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/Patient",
          "host": ["{{baseUrl}}"],
          "path": ["Patient"]
        },
        "description": "Create a new Patient resource with comprehensive demographics"
      }
    },
    {
      "name": "2. Get Patient by ID",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is Patient resource', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.resourceType).to.eql('Patient');",
              "    pm.expect(jsonData.id).to.exist;",
              "});",
              "",
              "pm.test('Patient data matches created resource', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.name[0].family).to.eql('Doe');",
              "    pm.expect(jsonData.gender).to.eql('male');",
              "    pm.expect(jsonData.active).to.be.true;",
              "});",
              "",
              "pm.test('Response has required FHIR metadata', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.meta).to.exist;",
              "    pm.expect(jsonData.meta.versionId).to.exist;",
              "    pm.expect(jsonData.meta.lastUpdated).to.exist;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/fhir+json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/Patient/{{patientId}}",
          "host": ["{{baseUrl}}"],
          "path": ["Patient", "{{patientId}}"]
        },
        "description": "Retrieve the created Patient resource by ID"
      }
    },
    {
      "name": "3. Create Observation",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 201', function () {",
              "    pm.response.to.have.status(201);",
              "});",
              "",
              "pm.test('Response has Location header', function () {",
              "    pm.response.to.have.header('Location');",
              "});",
              "",
              "pm.test('Response contains Observation resource', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.resourceType).to.eql('Observation');",
              "    pm.expect(jsonData.id).to.exist;",
              "    pm.globals.set('observationId', jsonData.id);",
              "});",
              "",
              "pm.test('Observation references correct Patient', function () {",
              "    const jsonData = pm.response.json();",
              "    const patientId = pm.globals.get('patientId');",
              "    pm.expect(jsonData.subject.reference).to.eql(`Patient/${patientId}`);",
              "});",
              "",
              "pm.test('Observation has vital signs data', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.status).to.eql('final');",
              "    pm.expect(jsonData.category[0].coding[0].code).to.eql('vital-signs');",
              "    pm.expect(jsonData.valueQuantity.value).to.exist;",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "POST",
        "header": [
          {
            "key": "Content-Type",
            "value": "application/fhir+json"
          },
          {
            "key": "Accept",
            "value": "application/fhir+json"
          }
        ],
        "body": {
          "mode": "raw",
          "raw": "{\n  \"resourceType\": \"Observation\",\n  \"status\": \"final\",\n  \"category\": [\n    {\n      \"coding\": [\n        {\n          \"system\": \"http://terminology.hl7.org/CodeSystem/observation-category\",\n          \"code\": \"vital-signs\",\n          \"display\": \"Vital Signs\"\n        }\n      ]\n    }\n  ],\n  \"code\": {\n    \"coding\": [\n      {\n        \"system\": \"http://loinc.org\",\n        \"code\": \"8867-4\",\n        \"display\": \"Heart rate\"\n      }\n    ]\n  },\n  \"subject\": {\n    \"reference\": \"Patient/{{patientId}}\",\n    \"display\": \"John Michael Doe\"\n  },\n  \"effectiveDateTime\": \"2025-07-16T14:00:00+00:00\",\n  \"valueQuantity\": {\n    \"value\": 72,\n    \"unit\": \"beats/minute\",\n    \"system\": \"http://unitsofmeasure.org\",\n    \"code\": \"/min\"\n  },\n  \"performer\": [\n    {\n      \"display\": \"Dr. Smith, Cardiologist\"\n    }\n  ],\n  \"component\": [\n    {\n      \"code\": {\n        \"coding\": [\n          {\n            \"system\": \"http://loinc.org\",\n            \"code\": \"8480-6\",\n            \"display\": \"Systolic blood pressure\"\n          }\n        ]\n      },\n      \"valueQuantity\": {\n        \"value\": 120,\n        \"unit\": \"mmHg\",\n        \"system\": \"http://unitsofmeasure.org\",\n        \"code\": \"mm[Hg]\"\n      }\n    },\n    {\n      \"code\": {\n        \"coding\": [\n          {\n            \"system\": \"http://loinc.org\",\n            \"code\": \"8462-4\",\n            \"display\": \"Diastolic blood pressure\"\n          }\n        ]\n      },\n      \"valueQuantity\": {\n        \"value\": 80,\n        \"unit\": \"mmHg\",\n        \"system\": \"http://unitsofmeasure.org\",\n        \"code\": \"mm[Hg]\"\n      }\n    }\n  ]\n}"
        },
        "url": {
          "raw": "{{baseUrl}}/Observation",
          "host": ["{{baseUrl}}"],
          "path": ["Observation"]
        },
        "description": "Create an Observation with vital signs data for the Patient"
      }
    },
    {
      "name": "4. Search Observations by Patient",
      "event": [
        {
          "listen": "test",
          "script": {
            "exec": [
              "pm.test('Status code is 200', function () {",
              "    pm.response.to.have.status(200);",
              "});",
              "",
              "pm.test('Response is Bundle resource', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.resourceType).to.eql('Bundle');",
              "    pm.expect(jsonData.type).to.eql('searchset');",
              "});",
              "",
              "pm.test('Bundle contains Observations', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.total).to.be.greaterThan(0);",
              "    pm.expect(jsonData.entry).to.be.an('array');",
              "    pm.expect(jsonData.entry.length).to.be.greaterThan(0);",
              "});",
              "",
              "pm.test('First entry is Observation for correct Patient', function () {",
              "    const jsonData = pm.response.json();",
              "    const patientId = pm.globals.get('patientId');",
              "    const firstEntry = jsonData.entry[0];",
              "    pm.expect(firstEntry.resource.resourceType).to.eql('Observation');",
              "    pm.expect(firstEntry.resource.subject.reference).to.eql(`Patient/${patientId}`);",
              "});",
              "",
              "pm.test('Search results have proper FHIR Bundle structure', function () {",
              "    const jsonData = pm.response.json();",
              "    pm.expect(jsonData.link).to.be.an('array');",
              "    pm.expect(jsonData.entry[0].search.mode).to.eql('match');",
              "});"
            ],
            "type": "text/javascript"
          }
        }
      ],
      "request": {
        "method": "GET",
        "header": [
          {
            "key": "Accept",
            "value": "application/fhir+json"
          }
        ],
        "url": {
          "raw": "{{baseUrl}}/Observation?subject=Patient/{{patientId}}",
          "host": ["{{baseUrl}}"],
          "path": ["Observation"],
          "query": [
            {
              "key": "subject",
              "value": "Patient/{{patientId}}"
            }
          ]
        },
        "description": "Search for all Observations belonging to the created Patient"
      }
    }
  ],
  "event": [
    {
      "listen": "prerequest",
      "script": {
        "exec": [
          "// Set default patientId if not already set",
          "if (!pm.globals.get('patientId')) {",
          "    pm.globals.set('patientId', '1');",
          "}"
        ],
        "type": "text/javascript"
      }
    }
  ]
}